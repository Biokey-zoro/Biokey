#include <WiFi.h>
#include <WebSocketsClient.h>
#include <HTTPClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// WiFi Credentials
const char* ssid = "HONORniRenz";
const char* password = "pogiRinz";

// WebSocket Server IP & Port
const char* websocketServer = "192.168.252.164";  
const int websocketPort = 8080;

const char* serverUrl = "http://192.168.252.164/LOCKERSYSTEM/admin_pages/validate_rfid.php";

// RFID Module Pins
#define SS_PIN 5
#define RST_PIN 4
MFRC522 rfid(SS_PIN, RST_PIN);

// LCD I2C (16x2) (SDA 21, SCL 22)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// GPIO Pins
#define LED_INDICATOR 17
#define LED1 25
#define LED2 26
#define LED3 27

bool scanningReg = false;
bool scanning = true;
unsigned long scanStartTime = 0;
const unsigned long scanDuration = 30000; // 30 seconds

WebSocketsClient webSocket;

// ============================
// WebSocket Event Handling
// ============================
void webSocketEvent(WStype_t type, uint8_t *payload, size_t length) {
    String command = String((char*)payload);
    command.trim();

    switch (type) {
        case WStype_CONNECTED:
            Serial.println("‚úÖ WebSocket Connected!");
            webSocket.sendTXT("ESP32_CONNECTED");
            lcd.clear();
            lcd.print("WS Connected!");
            break;

        case WStype_TEXT:
            if (command == "SCANNING_ACTIVE") {
                Serial.println("‚úÖ RFID Scanning Activated!");
                startRFIDScan();
            } 
            else if (command.startsWith("SCANNED_TAG:")) {
                handlePinActivation(command.substring(11).toInt());
            } 
            else if (command.startsWith("SCAN_TIMEOUT:") || command == "CANCEL_SCANNING") {
                stopRFIDScan();
            } 
            else if (command.startsWith("PIN_NUMBER:")) {
                handlePinActivation(command.substring(11).toInt());
            } 
            break;

        case WStype_DISCONNECTED:
            Serial.println("‚ö†Ô∏è WebSocket Disconnected!");
            lcd.clear();
            lcd.print("WS Disconnected!");
            lcd.setCursor(0, 1);
            lcd.print("Reconnecting...");
            break;

        default:
            Serial.println("‚ùì Unknown WebSocket Event: " + String(type));
            lcd.clear();
            lcd.print("Unknown Event:");
            lcd.setCursor(0, 1);
            lcd.print(type);
            break;
    }
}

// ============================
// Start RFID Scanning Mode
// ============================
void startRFIDScan() {
    scanningReg = true;
    scanning = false;
    scanStartTime = millis();
    digitalWrite(LED_INDICATOR, HIGH);

    lcd.clear();
    lcd.print("REG MODE ACTIVE");
    Serial.println("REG MODE ACTIVE");
}

// ============================
// Stop RFID Scanning Mode
// ============================
void stopRFIDScan() {
    scanningReg = false;
    scanning = true;
    digitalWrite(LED_INDICATOR, LOW);

    lcd.clear();
    lcd.print("Scan Stopped");
    Serial.println("Scan Stopped");
}

// ============================
// LED Activation Based on Pin
// ============================
void handlePinActivation(int pinNumber) {
    digitalWrite(LED1, LOW);
    digitalWrite(LED2, LOW);
    digitalWrite(LED3, LOW);

    if (pinNumber == LED1 || pinNumber == LED2 || pinNumber == LED3) {
        digitalWrite(pinNumber, HIGH);
        Serial.println("‚úÖ LED " + String(pinNumber) + " Activated!");
        lcd.clear();
        lcd.print("LED Activated:");
        lcd.setCursor(0, 1);
        lcd.print("Pin " + String(pinNumber));
    } else {
        Serial.println("‚ùå Invalid Pin Received: " + String(pinNumber));
        lcd.clear();
        lcd.print("Invalid Pin!");
    }
}

// ============================
// WiFi Connection Handling
// ============================
void connectToWiFi() {
    WiFi.begin(ssid, password);
    lcd.clear();
    lcd.print("Connecting WiFi...");

    unsigned long startTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startTime < 20000) {
        delay(500);
        Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ WiFi Connected!");
        lcd.clear();
        lcd.print("WiFi Connected!");
    } else {
        Serial.println("\n‚ùå WiFi Failed!");
        lcd.clear();
        lcd.print("WiFi Failed!");
        delay(3000);
        ESP.restart();
    }
}

// ============================
// Setup Function
// ============================
void setup() {
    Serial.begin(115200);

    lcd.init();
    lcd.backlight();

    connectToWiFi();

    pinMode(LED_INDICATOR, OUTPUT);
    pinMode(LED1, OUTPUT);
    pinMode(LED2, OUTPUT);
    pinMode(LED3, OUTPUT);

    digitalWrite(LED_INDICATOR, LOW);
    digitalWrite(LED1, LOW);
    digitalWrite(LED2, LOW);
    digitalWrite(LED3, LOW);

    SPI.begin();
    rfid.PCD_Init();

    webSocket.begin(websocketServer, websocketPort, "/");
    webSocket.onEvent(webSocketEvent);

    delay(1000);
}

// ============================
// Main Loop Function
// ============================
void loop() {
    webSocket.loop(); // Ensure WebSocket keeps running

    // ============================
    // RFID Registration Mode Logic
    // ============================
    if (scanningReg) {
        lcd.setCursor(0, 0);
        lcd.print("Reg Mode Active!");

        if (millis() - scanStartTime > scanDuration) {
            stopRFIDScan();
            return;
        }

        if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
            String tag = "";
            for (byte i = 0; i < rfid.uid.size; i++) {
                tag += String(rfid.uid.uidByte[i], HEX);
            }
            tag.toUpperCase();

            Serial.println("üì§ Sending RFID (Reg Mode): " + tag);
            webSocket.sendTXT("RFID_TAG:" + tag);

            lcd.clear();
            lcd.print("New RFID Received!");
            lcd.setCursor(0, 1);
            lcd.print(tag);

            stopRFIDScan();
            rfid.PICC_HaltA();
            rfid.PCD_StopCrypto1();
        }

        return; // Prevent normal scanning while in registration mode
    }

    // ============================
    // Continuous RFID Scanning Mode (Modified)
    // ============================
    if (scanning && rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
        String tag = "";
        for (byte i = 0; i < rfid.uid.size; i++) {
            tag += String(rfid.uid.uidByte[i], HEX);
        }
        tag.toUpperCase();

        Serial.println("üì§ Sending RFID for Validation: " + tag);

        // HTTP Request to validate_rfid.php
        HTTPClient http;
        http.begin(serverUrl);
        http.addHeader("Content-Type", "application/x-www-form-urlencoded");

        String postData = "rfid_tag=" + tag;
        int httpResponseCode = http.POST(postData);

        if (httpResponseCode > 0) {
            String response = http.getString();
            Serial.println("‚úÖ Server Response: " + response);

            if (response.startsWith("PIN_NUMBER:")) {
                int pinNumber = response.substring(11).toInt();
                handlePinActivation(pinNumber);
            } else if (response == "ACCESS_DENIED") {
                Serial.println("‚ùå Access Denied!");
                lcd.clear();
                lcd.print("Access Denied!");
            }
        } else {
            Serial.println("‚ùå HTTP Request Failed!");
        }

        http.end();

        lcd.setCursor(0, 1);
        lcd.print("Tag: " + tag);

        rfid.PICC_HaltA();
        rfid.PCD_StopCrypto1();
    }
}


void validateRFID(String tag) {
    Serial.println("üì§ Sending RFID for Validation: " + tag);

    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    String postData = "rfid_tag=" + tag;
    int httpResponseCode = http.POST(postData);

    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.println("‚úÖ Server Response: " + response);

        StaticJsonDocument<200> doc;
        DeserializationError error = deserializeJson(doc, response);

        if (!error) {
            String status = doc["status"].as<String>();
            if (status == "SUCCESS") {
                int pinNumber = doc["pin_number"];
                handlePinActivation(pinNumber);
            } else {
                Serial.println("‚ùå Access Denied!");
                lcd.clear();
                lcd.print("Access Denied!");
            }
        } else {
            Serial.println("‚ùå JSON Parsing Failed!");
        }
    } else {
        Serial.println("‚ùå HTTP Request Failed!");
    }

    http.end();
}

/*

webSocket.onEvent([](WStype_t type, uint8_t * payload, size_t length) {
    String message = String((char*)payload);
    
    if (message == "CONFIRM_ACCESS_GRANTED") {
        Serial.println("‚úÖ Access Confirmed: Unlocking...");
        digitalWrite(LOCK_PIN, HIGH);  // Example: Unlock mechanism
        delay(3000);
        digitalWrite(LOCK_PIN, LOW);   // Lock again
    } else if (message == "CONFIRM_ACCESS_DENIED") {
        Serial.println("‚ùå Access Denied");
    }
});


*/
